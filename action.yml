name: Build, Scan and push Docker images
description: Thin wrapper around docker/build-push-action to scan docker images using TruffleHog
author: rudderlabs

inputs:
  build-args:
    description: "List of build-time variables"
    required: false
  cache-from:
    description: "List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)"
    required: false
  cache-to:
    description: "List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)"
    required: false
  context:
    description: "Build's context is the set of files located in the specified PATH or URL"
    required: false
  file:
    description: "Path to the Dockerfile"
    required: false
  labels:
    description: "List of metadata for an image"
    required: false
  load:
    description: "Load is a shorthand for --output=type=docker"
    required: false
    default: "false"
  platforms:
    description: "List of target platforms for build"
    required: false
  provenance:
    description: "Generate provenance attestation for the build (shorthand for --attest=type=provenance)"
    required: false
    default: "false"
  push:
    description: "Push is a shorthand for --output=type=registry"
    required: false
    default: "false"
  sbom:
    description: "Generate SBOM attestation for the build (shorthand for --attest=type=sbom)"
    required: false
  secret-envs:
    description: "List of secret env vars to expose to the build (e.g., key=envname, MY_SECRET=MY_ENV_VAR)"
    required: false
  secrets:
    description: "List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)"
    required: false
  tags:
    description: "List of tags"
    required: false
  target:
    description: "Set the target build stage to build"
    required: false
  snyk-enabled:
    description: "Enable Snyk scan step. Set to true to run Snyk scan."
    required: false
    default: false
  snyk-token:
    description: "Snyk API token. Required if snyk-enabled is true."
    required: false
  snyk-org:
    description: "Snyk organization slug (optional)."
    required: false
  snyk-project-name:
    description: "Project name for Snyk dashboard (optional)."
    required: false

outputs:
  imageid:
    description: "Image ID"
    value: ${{ steps.build-and-push.outputs.imageid }}
  digest:
    description: "Image digest"
    value: ${{ steps.build-and-push.outputs.digest }}
  metadata:
    description: "Build result metadata"
    value: ${{ steps.build-and-push.outputs.metadata }}

runs:
  using: "composite"
  steps:
    - name: Select single platform
      id: select-single-platform
      shell: bash
      run: |
        if [[ "${{ inputs.platforms }}" == *","* || "${{ inputs.platforms }}" == *"["* || "${{ inputs.platforms }}" == *"-"* || "${{ inputs.platforms }}" == "" ]]; then
          echo "platform=linux/amd64" >> $GITHUB_OUTPUT
        else
          echo "platform=${{ inputs.platforms }}" >> $GITHUB_OUTPUT
        fi

    - name: Build image
      uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        platforms: ${{ steps.select-single-platform.outputs.platform }}
        push: false
        tags: ${{ inputs.tags }}
        labels: ${{ inputs.labels }}
        build-args: ${{ inputs.build-args }}
        secret-envs: ${{ inputs.secret-envs }}
        secrets: ${{ inputs.secrets }}
        cache-from: ${{ inputs.cache-from }}
        cache-to: ${{ inputs.cache-to }}
        target: ${{ inputs.target }}
        outputs: type=docker,dest=${{ runner.temp }}/local-docker-image.tar

    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install python requirements
      shell: bash
      run: pip install -r $GITHUB_ACTION_PATH/requirements.txt

    - name: Get github actions runner architecture
      shell: bash
      run: |
        if [[ "${{ runner.arch }}" == "X64" ]]; then
          echo "TRUFFLEHOG_ARCH=amd64" >> $GITHUB_ENV
        elif [[ "${{ runner.arch }}" == "ARM64" ]]; then
          echo "TRUFFLEHOG_ARCH=arm64" >> $GITHUB_ENV
        else
          echo "Unsupported architecture: ${{ runner.arch }}"
          exit 1
        fi

    - name: Install TruffleHog
      shell: bash
      run: |
        TRUFFLEHOG_VERSION="3.88.5"
        echo "Installing TruffleHog version $TRUFFLEHOG_VERSION"
        curl -sL "https://github.com/trufflesecurity/trufflehog/releases/download/v${TRUFFLEHOG_VERSION}/trufflehog_${TRUFFLEHOG_VERSION}_linux_${TRUFFLEHOG_ARCH}.tar.gz" -o trufflehog.tar.gz
        tar -xzf trufflehog.tar.gz
        chmod +x trufflehog

        sudo mv trufflehog /usr/local/bin/

        # Cleanup
        rm trufflehog.tar.gz

    - name: Scan docker image with TruffleHog
      id: scan-docker-image
      shell: bash
      run: |
        python $GITHUB_ACTION_PATH/docker-image-scanner.py --image ${{ runner.temp }}/local-docker-image.tar

    - name: Build and push
      id: build-and-push
      if: success()
      uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        platforms: ${{ inputs.platforms }}
        push: ${{ inputs.push }}
        tags: ${{ inputs.tags }}
        labels: ${{ inputs.labels }}
        build-args: ${{ inputs.build-args }}
        sbom: ${{ inputs.sbom }}
        provenance: ${{ inputs.provenance }}
        secret-envs: ${{ inputs.secret-envs }}
        secrets: ${{ inputs.secrets }}
        cache-from: ${{ inputs.cache-from }}
        cache-to: ${{ inputs.cache-to }}
        target: ${{ inputs.target }}

    - name: Scan docker image with Snyk
      shell: bash
      if: ${{ inputs.snyk-enabled }}
      env:
        SNYK_TOKEN: ${{ inputs.snyk-token }}
        SNYK_ORG: ${{ inputs.snyk-org }}
        SNYK_PROJECT_NAME: ${{ inputs.snyk-project-name }}
        SNYK_FILE: ${{ inputs.file }}
      run: |
        echo "Installing Snyk CLI..."
        npm install -g snyk

        echo "Snyk CLI Version"
        snyk --version

        # Monitor to Snyk dashboard
        snyk container monitor \
          --org="$SNYK_ORG" \
          --project-name="$SNYK_PROJECT_NAME" \
          --file="$SNYK_FILE" \
          ${{ inputs.tags }}@${{ steps.build-and-push.outputs.digest }}

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.8.1

    - name: Sign the images with GitHub OIDC Token
      env:
        DIGEST: ${{ steps.build-and-push.outputs.digest }}
        TAGS: ${{ inputs.tags }}
      shell: bash
      run: |
        images=""
        for tag in ${TAGS}; do
          images+="${tag}@${DIGEST} "
        done
        cosign sign  --yes ${images}
